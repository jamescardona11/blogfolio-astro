---
import type { UsesByCategory, UsesItem } from '@/lib/models/uses-item'
import TabElements from './TabElements.astro'

interface Props {
  usesByCategory: UsesByCategory
}

const { usesByCategory } = Astro.props
const { coding, software, hardware, thisPage } = usesByCategory

const tabs = ['All', 'Coding', 'Software', 'Hardware', 'This Page']
const tabsItems: Map<string, UsesItem[]> = new Map()

tabsItems.set(tabs[0], [...coding, ...software, ...hardware, ...thisPage])
tabsItems.set(tabs[1], coding)
tabsItems.set(tabs[2], software)
tabsItems.set(tabs[3], hardware)
tabsItems.set(tabs[4], thisPage)
---

<div class='tabs'>
  <div
    class='flex flex-wrap text-sm border-b border-slate-100 dark:border-slate-800 mb-10 gap-4 p-1'
  >
    {
      tabs.map((item, index) => {
        const id = `tab-${index + 1}`
        return (
          <button
            id={id}
            aria-selected={index === 0}
            aria-controls={`tab-panel-${index + 1}`}
            role='tab'
            type='button'
            tabindex={index === 0 ? 0 : -1}
          >
            {item}
          </button>
        )
      })
    }
  </div>

  {
    tabs.map((tab, index) => {
      const id = `tab-panel-${index + 1}`
      const items = tabsItems.get(tab)
      return (
        <div
          id={id}
          aria-labelledby={`tab-${index + 1}`}
          role='tabpanel'
          tabindex={index === 0 ? 0 : -1}
          hidden={index !== 0}
        >
          <TabElements title={tab} items={items} />
        </div>
      )
    })
  }
</div>

<style>
  button[role='tab'] {
    display: block;
    padding-top: 0.75rem;
    padding-bottom: 0.75rem;
    font-weight: 500;
  }

  button[role='tab'][aria-selected='true'] {
    border-bottom-width: 2px;
    border-color: #0ea5e9;
  }
</style>

<script src='src/scripts/tabs-controller.js'></script>
