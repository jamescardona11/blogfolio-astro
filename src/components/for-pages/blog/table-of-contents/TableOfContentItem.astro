---
import { TOP_ID, type TocItem } from './toc'

interface Props {
  toc: TocItem[]
  depth?: number
}

const { toc, depth = 0 } = Astro.props
---

<ul>
  {
    toc.map(heading => {
      const id = heading.slug === TOP_ID ? 'scrollLink' : undefined
      return (
        <Fragment>
          <li>
            <a
              id={id}
              href={'#' + heading.slug}
              class='block transition-all text-zinc-100/50 underline-offset-2 hover:text-zinc-100 hover:decoration-zinc-200/50'
            >
              {heading.text}
            </a>
            {heading.children.length > 0 && (
              <Fragment>
                <Astro.self toc={heading.children} depth={depth + 1} />
              </Fragment>
            )}
          </li>
        </Fragment>
      )
    })
  }
</ul>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    // Encuentra el enlace que activará el desplazamiento
    const scrollLink = document.getElementById('scrollLink')

    // Agrega un evento de clic al enlace
    scrollLink.addEventListener('click', function (e) {
      e.preventDefault()

      // Encuentra el elemento de destino
      const targetElement = document.querySelector('h1')

      // Calcula el desplazamiento, incluyendo el margen deseado
      const offset = targetElement.offsetTop - 50

      // Usa el método `scrollTo` para el desplazamiento personalizado
      window.scrollTo({
        top: offset,
        behavior: 'smooth'
      })
    })
  })
</script>

<style define:vars={{ depth }}>
  ul {
    padding: 0;
    list-style: none;
  }
  a {
    --pad-inline: 0.5rem;
    display: block;
    border-radius: 0.25rem;
    padding-block: 0.25rem;
    padding-inline: calc(1rem * var(--depth) + var(--pad-inline))
      var(--pad-inline);
    line-height: 1.25;
  }
  a[aria-current='true'],
  a[aria-current='true']:hover,
  a[aria-current='true']:focus {
    color: var(--color-zinc-100);
    text-decoration: underline;
    text-decoration-color: var(--color-zinc-100);
  }
</style>
