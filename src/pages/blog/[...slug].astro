---
import type { Post } from '@/lib/types/post.type'

import PostLayout from '@/layouts/PostLayout.astro'
import FormattedDate from '@/components/for-pages/blog/FormattedDate.astro'
import PostSeries from '@/components/for-pages/blog/posts/PostSeries.astro'
import Link from '@/components/Link.astro'
import RenderBlocks from '@/components/notion/RenderBlocks.astro'
import PostRightPanel from '@/components/for-pages/blog/posts/PostRightPanel.astro'

import { TOP_ID } from '@/components/for-pages/blog/posts/table-of-contents/toc'
import {
  getBlogContent,
  getPostsData,
  getPostsSerie
} from '@/lib/data/blog-provider'

export async function getStaticPaths() {
  const posts = await getPostsData()
  return posts.map((post, index) => ({
    params: { slug: post.slug },
    props: { post, next: posts[index + 1], prev: posts[index - 1] }
  }))
}

interface Props {
  post: Post
}

const { post } = Astro.props

// TOOD: related, tags
const { slug, cover, title, date, tags } = post

const result = await getBlogContent(post)

const { Content, headings } = result
const { blocks } = result

const postsSerie = await getPostsSerie(slug)
---

<PostLayout>
  <!-- TOP -->
  <div>
    <h1 id={TOP_ID} class='text-2xl font-medium sm:text-3xl'>{title}</h1>

    <div class='flex mt-2 space-x-2 text-lg text-zinc-100/50'>
      {
        date && (
          <p class='text-sm text-muted-foreground'>
            Published on <FormattedDate date={date} />
          </p>
        )
      }
      <div class='text-zinc-100/30'>&middot;</div>
      <div>METRICS</div>

      <!-- Good spot to add the cover image -->
    </div>
  </div>

  <!-- RIGHT -->
  <PostRightPanel headings={headings} slug={slug} />

  <!-- The best spot to add the cover image -->

  {
    postsSerie != null && postsSerie.posts.length > 1 && (
      <div serie-top-component>
        <PostSeries data={postsSerie} isInteractive={true} />
      </div>
    )
  }

  <!-- Content is the astro:content object -->
  {
    Content && (
      <div class='pt-10 pb-8 prose max-w-none dark:prose-invert'>
        <Content />
      </div>
    )
  }

  <!-- blocks is the data from notion -->
  {
    blocks && (
      <div>
        <RenderBlocks blocks={blocks} />
      </div>
    )
  }

  <div class='mt-16'>{/* <LikeButton2 slug={post.slug} /> */}</div>
  {
    postsSerie != null && postsSerie.posts.length > 1 ? (
      <div serie-bottom-component class='my-16'>
        <PostSeries data={postsSerie} />
      </div>
    ) : null
  }

  <!-- <Link
      href='/blog'
      class='absolute left-[-200px] top-14 hidden xl:inline-flex'
    >
      See all posts
    </Link>
    <div>
      {
        date && (
          <p class='text-sm text-muted-foreground'>
            Published on <FormattedDate date={date} />
          </p>
        )
      }
      <h1
        class='inline-block mt-2 text-4xl leading-tight font-heading lg:text-5xl'
      >
        {title}
      </h1>
    </div>
    {
      image && (
        <Image
          src={image}
          alt={title}
          width={720}
          height={405}
          class='my-8 transition-colors border rounded-md bg-muted'
        />
      )
    }

    {
      postsSerie != null && postsSerie.posts.length > 1 && (
        <PostSeries data={postsSerie} isInteractive={true} />
      )
    }
    <div class='pt-10 pb-8 prose max-w-none dark:prose-invert'>
      <Content />
    </div>
    <hr class='mt-12' />
    <div class='flex justify-center py-6 lg:py-10'>
      <Link href='/blog'>chevronLeft --- See all posts</Link>
    </div> -->
</PostLayout>

<script src='/src/scripts/copy-button.js'></script>
<script>
  function isElementVisible(element: Element | null) {
    if (!element) return false
    const rect = element.getBoundingClientRect()
    const windowHeight =
      window.innerHeight || document.documentElement.clientHeight
    const windowWidth =
      window.innerWidth || document.documentElement.clientWidth

    // check if element is inside of viewport
    return (
      rect.top >= 0 &&
      rect.left >= 0 &&
      rect.bottom <= windowHeight &&
      rect.right <= windowWidth
    )
  }

  const topSerie = document.querySelector('[serie-top-component]')
  const bottomSerie = document.querySelector('[serie-bottom-component]')

  let bothVisible = 0

  if (isElementVisible(topSerie)) {
    bothVisible += 1
  }

  if (isElementVisible(bottomSerie)) {
    bothVisible += 1
  }

  if (bothVisible === 2) {
    bottomSerie?.classList.add('hidden')
  }
</script>
